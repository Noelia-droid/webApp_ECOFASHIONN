webAppEcoFashion/
‚îÇ
‚îú‚îÄ‚îÄ üìÅ backend/                    ‚Üê EL CEREBRO (Servidor)
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rbac.js
‚îÇ   ‚îÇ   |‚îÄ‚îÄ passport.js            ‚Üê Configuraci√≥n de Google OAuth
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ security.js          ‚Üê ‚≠ê NUEVO: Config de Helmet
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hashids.js           ‚Üê ‚≠ê NUEVO: Config de Hashids
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js    ‚Üê Usa Argon2 aqu√≠
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ productController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ orderController.js
|   |
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ middleware/             ‚Üê Guardias de seguridad
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth.js                ‚Üê Verifica si usuario tiene permiso
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.js              ‚Üê Argon2 para passwords
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rol.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ order.js
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js    
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ orders.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ products.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ users.js
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ argon2.js    ‚Üê Usa Argon2 aqu√≠
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hashids.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jwt.js
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ server.js                  ‚Üê ARCHIVO PRINCIPAL del servidor
‚îÇ
‚îú‚îÄ‚îÄ üìÅ frontend/                   ‚Üê LA CARA (Lo que ve el usuario)
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ pages/                  ‚Üê P√°ginas HTML
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.html             ‚Üê P√°gina de inicio
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.html             ‚Üê Formulario de login
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.html          ‚Üê Formulario de registro
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dashboard_USER.html    ‚Üê Panel del usuario
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ js/                     ‚Üê Scripts JavaScript
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config.js              ‚Üê Conexi√≥n con el backend
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ css/                    ‚Üê Estilos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ styles.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ register.css
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ images/                 ‚Üê Im√°genes, logos
‚îÇ
‚îú‚îÄ‚îÄ üìÅ node_modules/                ‚Üê Herramientas prestadas
‚îú‚îÄ‚îÄ üìÑ .env                        ‚Üê Variables secretas (NUNCA subir a Git)
‚îú‚îÄ‚îÄ üìÑ .gitignore                  ‚Üê Qu√© archivos NO subir a GitHub
‚îú‚îÄ‚îÄ üìÑ package.json                ‚Üê Lista de dependencias del proyecto
‚îî‚îÄ‚îÄ üìÑ README.md                   ‚Üê Documentaci√≥n del proyecto

## üîë 5. CONCEPTOS CLAVE

##LIBRER√çAS
---------------------------------------------------------------------------------------------------------------------
- Argon2: Esta la utilizaremos para hashing de contrase√±as con salt autom√°tico integrado que hace que las contrase√±as no se almacenen en texto plano en el login. Se aplicar√° en el login-backend. Se puede entender como una librer√≠a de node.js que proporciona algoritmo, ya que esta se implementa de forma de biblioteca.
 

- Helmet: Es una librer√≠a de node.js que ayudar√° a proteger la web app configurando varios encabezados/headers HTTP para la seguridad de toda la p√°gina. Se implementar√° en el backend.
 

- Hashids: Se implementar√° en el backend (en t√©rminos de node.js). Esta se utilizar√° para encriptar URL e IPs. EJEMPLO:
---------------------------------------------------------------------------------------------------------------------

### **¬øQu√© es una SESI√ìN?**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Cuando haces login, el servidor    ‚îÇ
‚îÇ  guarda tus datos en una "sesi√≥n"   ‚îÇ
‚îÇ  que dura 24 horas.                 ‚îÇ
‚îÇ                                     ‚îÇ      
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### **¬øQu√© es OAUTH?**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  En vez de crear otra contrase√±a,   ‚îÇ
‚îÇ  Google verifica tu identidad y     ‚îÇ
‚îÇ  le dice a tu app: "S√≠, es ella"    ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ  Tu app NUNCA ve tu contrase√±a      ‚îÇ
‚îÇ  de Google.                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### **¬øQu√© es una API?**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  API = Forma de comunicaci√≥n        ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ  Frontend dice: "Dame datos usuario"‚îÇ
‚îÇ  Backend responde: {name: "Mar√≠a"}  ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ  Como pedir comida en un restaurant ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

## üé¨ FLUJO VISUAL COMPLETO CON MIDDLEWARE
```
USUARIO intenta acceder a /admin/panel
   ‚îÇ
   ‚ñº
1. Request llega a server.js
   ‚îÇ
   ‚îú‚îÄ> app.get('/admin/panel', isAdmin, handler)
   ‚îÇ                            ‚Üë
   ‚îÇ                            GUARDIA
   ‚ñº
2. MIDDLEWARE isAdmin() se ejecuta PRIMERO
   ‚îÇ
   ‚îú‚îÄ> ¬øreq.isAuthenticated()? 
   ‚îÇ   ‚îÇ
   ‚îÇ   ‚îú‚îÄ NO ‚Üí ‚ùå Error 403 "Acceso denegado"
   ‚îÇ   ‚îÇ
   ‚îÇ   ‚îî‚îÄ S√ç ‚Üí Contin√∫a ‚Üì
   ‚îÇ
   ‚îú‚îÄ> ¬øreq.user.role === 'admin'?
   ‚îÇ   ‚îÇ
   ‚îÇ   ‚îú‚îÄ NO ‚Üí ‚ùå Error 403 "Acceso denegado"
   ‚îÇ   ‚îÇ
   ‚îÇ   ‚îî‚îÄ S√ç ‚Üí ‚úÖ Contin√∫a ‚Üì
   ‚îÇ
   ‚ñº
3. next() ‚Üí Ejecutar handler (mostrar panel)
   ‚îÇ
   ‚ñº
4. Respuesta enviada al usuario

## üõ°Ô∏è NIVELES DE SEGURIDAD IMPLEMENTADOS
```
NIVEL 1: Helmet
‚îú‚îÄ Previene XSS
‚îú‚îÄ Previene Clickjacking
‚îî‚îÄ Oculta info del servidor

NIVEL 2: Rate Limiting
‚îú‚îÄ Max 5 intentos login / 15 min
‚îî‚îÄ Max 3 registros / hora

NIVEL 3: Argon2
‚îú‚îÄ Passwords nunca en texto plano
‚îú‚îÄ Salt autom√°tico √∫nico
‚îî‚îÄ Resistente a ataques GPU

NIVEL 4: Hashids
‚îú‚îÄ IDs no secuenciales
‚îú‚îÄ URLs no predecibles
‚îî‚îÄ Previene enumeraci√≥n


RESUMIDO: 
python -m venv venv

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

.\venv\Scripts\Activate

cd webappEcoFashion

cd backend

npm run dev

PASOS PARA EL GIT PUSH DESDE GIT BASH(CON O SIN REPOSITO CREADO):
git init   -> inicializa el repositorio
git add .  -> Agrega los archivos
git commit - "Commit de cambios"  -> Se describen los cambios
git remode add origin https://github.com/usuario/repositorio.git  -> Se enlaza con el repositorio(url del repositorio de git)
git push -u origin main   -> Se hace push al repositorio nuevo, si la rama est√° en master se cambia "main" por "master", de igual forma si es otra rama
